/*
 * BaseCompany.cpp
 *
 *  Created on: 2018年11月6日
 *      Author: zihan
 */

#include "BaseCompany.h"
#include <cstring>
#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>

namespace edu {
namespace neu {
namespace csye6205 {

BaseCompany::BaseCompany() {
	// TODO Auto-generated constructor stub

}

BaseCompany::~BaseCompany() {
	// TODO Auto-generated destructor stub
}

void BaseCompany::loadEmployees(vector<string> csvData) {
	for (string s: csvData) {
		const char * delimiter = ",";
		string lineBuffer = s;
		std::vector<char> v(lineBuffer.begin(), lineBuffer.end());
		int id = stoi(string(strtok(v.data(), delimiter)));
		string firstname = string(strtok(NULL, delimiter));
		string lastname = string(strtok(NULL, delimiter));
		int age = stoi(string(strtok(NULL, delimiter)));
		double wage = stod(string(strtok(NULL, delimiter)));

		BaseEmployee * be = new BaseEmployee(id,firstname,lastname,age,wage);
		this->employees.push_back(*be);
	}
}
void BaseCompany::scaleEmployees(double offset, double scale) {
	for (BaseEmployee be: this->employees) {
		be.Wage = scale * be.Wage + offset;
	}
}
void BaseCompany::sortEmployees() {
	std::sort(this->employees.begin(), this->employees.end(), sortEmployeeByWage);
}
void BaseCompany::showEmployees() {
	cout<<"Employee: "<<endl;
	for (BaseEmployee be: this->employees) {
		cout<<"ID:"<< be.ID <<" Name:"<< be.FirstName << " Wage:" << be.Wage << endl;
	}
}
void BaseCompany::loadItems(vector<string> csvData) {
	for (string s: csvData) {
		const char * delimiter = ",";
		string lineBuffer = s;
		std::vector<char> v(lineBuffer.begin(), lineBuffer.end());
		int id = stoi(string(strtok(v.data(), delimiter)));
		string name = string(strtok(NULL, delimiter));
		double price = stod(string(strtok(NULL, delimiter)));

		BaseItem * bi = new BaseItem(id,name,price);
		this->items.push_back(*bi);
	}
}
void BaseCompany::scaleItems(double offset, double scale) {
	for (BaseItem * bi: this->items) {
		bi->setPrice(scale * bi->getPrice() + offset);
	}
}
void BaseCompany::sortItems() {
	std::sort(this->items.begin(), this->items.end(), sortItemByPrice);
}
void BaseCompany::showItems() {
	cout<<"Items: "<<endl;
	for (BaseItem bi: this->items) {
		cout<<"ID:"<< bi.id <<" Name:"<< bi.getName() << " Price:" << bi.getPrice() << endl;
	}
}

} /* namespace csye6205 */
} /* namespace neu */
} /* namespace edu */
